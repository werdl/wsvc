\x80\x04\x95\x95\x12\x00\x00\x00\x00\x00\x00}\x94(\x8c\t./wsvc.py\x94X\x95\x08\x00\x00import os,logging,sys\nimport json,pickle\nfrom time import gmtime, strftime\nimport shutil\nclass wsvc():\n    def __init__(self):\n        """Check wsvc repo if exists, assigns to `self.init`"""\n        self.init=True if os.path.exists(".wsvc") else False\n        self.currentstate=""\n    def create(self,reponame:str,force=False):\n        """ Initialize wsvc repo (name `reponame`)at `savedir`, overwriting if `force` """\n        if not os.path.exists(".wsvc"):\n            os.makedirs(".wsvc")\n        else:\n            if force:\n                logging.warning("Over-writing existsing directory")\n            else:\n                logging.error("Path not created, dir already exists")\n                sys.exit(-1)\n        with open(f".wsvc/config.json","w") as config:\n            data=json.dumps({"name":reponame,"created":strftime("%Y-%m-%d %H:%M:%S", gmtime())})\n            config.write(data)    \n    def check(self):\n        """Check if wsvc exists in folder"""\n        return self.init\n    def serialize(self) -> bool:\n        """Serialize current repo into a string"""\n        if not self.init:\n            return False\n        files=[os.path.join(dirpath,f) for (dirpath, dirnames, filenames) in os.walk(".") for f in filenames]\n        tempserial={}\n        for file in files:\n            with open(file) as f:\n                content=f.readlines()\n                real=""\n                for x in content:\n                    real+=x\n                tempserial[file]=real\n        self.currentstate=pickle.dumps(tempserial)\n    def stash(self,commitmsg):\n        """Stashes changes away under name `commitmsg` """\n        with open(f".wsvc/{commitmsg}.wsvc","w") as file:\n            specialstate=str(self.currentstate)[2:]\n            specialstate=specialstate[:-1]\n            file.write(str(specialstate))\n        print("Changes stashed")\n    def delete(self):\n        shutil.rmtree(".wsvc")\ninstance=wsvc()\nmatch sys.argv[1]:\n    case "init":\n        instance.create(reponame=sys.argv[2],force=False)\n    case "del":\n        instance.delete()\n    case "check":\n        print("Exists:",instance.check())\n    case "stash":\n        instance.serialize()\n        instance.stash(sys.argv[2])\x94\x8c\x10./.wsvc/hey.wsvc\x94X\x85\t\x00\x00\\x80\\x04\\x95\\xf7\\x08\\x00\\x00\\x00\\x00\\x00\\x00}\\x94(\\x8c\\t./wsvc.py\\x94X\\x95\\x08\\x00\\x00import os,logging,sys\\nimport json,pickle\\nfrom time import gmtime, strftime\\nimport shutil\\nclass wsvc():\\n    def __init__(self):\\n        """Check wsvc re[p if exists, assigns to `self.init`"""\\n        self.init=True if os.path.exists(".wsvc") else False\\n        self.currentstate=""\\n    def create(self,reponame:str,force=False):\\n        """ Initialize wsvc repo (name `reponame`)at `savedir`, overwriting if `force` """\\n        if not os.path.exists(".wsvc"):\\n            os.makedirs(".wsvc")\\n        else:\\n            if force:\\n                logging.warning("Over-writing existsing directory")\\n            else:\\n                logging.error("Path not created, dir already exists")\\n                sys.exit(-1)\\n        with open(f".wsvc/config.json","w") as config:\\n            data=json.dumps({"name":reponame,"created":strftime("%Y-%m-%d %H:%M:%S", gmtime())})\\n            config.write(data)    \\n    def check(self):\\n        """Check if wsvc exists in folder"""\\n        return self.init\\n    def serialize(self) -> bool:\\n        """Serialize current repo into a string"""\\n        if not self.init:\\n            return False\\n        files=[os.path.join(dirpath,f) for (dirpath, dirnames, filenames) in os.walk(".") for f in filenames]\\n        tempserial={}\\n        for file in files:\\n            with open(file) as f:\\n                content=f.readlines()\\n                real=""\\n                for x in content:\\n                    real+=x\\n                tempserial[file]=real\\n        self.currentstate=pickle.dumps(tempserial)\\n    def stash(self,commitmsg):\\n        """Stashes changes away under name `commitmsg` """\\n        with open(f".wsvc/{commitmsg}.wsvc","w") as file:\\n            specialstate=str(self.currentstate)[2:]\\n            specialstate=specialstate[:-1]\\n            file.write(str(specialstate))\\n        print("Changes stashed")\\n    def delete(self):\\n        shutil.rmtree(".wsvc")\\ninstance=wsvc()\\nmatch sys.argv[1]:\\n    case "init":\\n        instance.create(reponame=sys.argv[2],force=False)\\n    case "del":\\n        instance.delete()\\n    case "check":\\n        print("Exists:",instance.check())\\n    case "stash":\\n        instance.serialize()\\n        instance.stash(sys.argv[2])\\x94\\x8c\\x13./.wsvc/config.json\\x94\\x8c2{"name": "test", "created": "2023-07-07 12:57:08"}\\x94u.\x94\x8c\x13./.wsvc/config.json\x94\x8c2{"name": "test", "created": "2023-07-07 12:57:08"}\x94u.